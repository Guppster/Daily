use std::io;
use std::cmp::Ordering;
use std::env;

fn main() 
{
	let mut input = env::args().collect();

	for s in input.iter()
	{
		let mass = getMass(input);
		let balanceIndex = getBalanceIndex(mass);

		if(balanceIndex == 0)
		{
			println!("{} DOES NOT BALANCE", s);
		}

	}
}//End of Main method

fn getBalanceIndex(mass: Vec<i32>) -> i32
{
	let epsilon = 1e-9;
	let total = mass.iter().sum::<i32>();
}//End of getBalanceIndex function

fn getBalanceSum(mass: Vec<i32>) -> i32
{
	let mut it = mass.iter().enumerate();
	while it.len() != it.max() 
	{
		let (a, b):: = it.next();
		println!("{} {}", a, b );
	}
}//End of getBalanceSum function

fn getMass(input: String) -> Vec<i32>
{

}//End of getMass function