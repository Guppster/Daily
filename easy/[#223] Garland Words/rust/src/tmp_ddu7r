struct Garland<'w> 
{
    word: &'w str,
    degree: usize
}

fn main() 
{
    for Garland in std::env::args().skip(1)
    {
    	match g
    	println!("{}", Garland);
    }

}//End of main method

//Returns true if s is a GarlandWord with degree d else false
fn garland_helper(s: &str, d:usize) -> bool
{
	let begin = s.chars().take(d);
	let end = s.chars().skip(s.len()-d);

	begin.zip(end).all((|x| x.0 == x.1))
}

//Returns the degee if s is a garland word, and 0 otherwise
fn garland(s: &str) -> usize
{
	match (0..s.len())
		.map(|d| garland_helper(s,d))
		.rposition(|b| b)
		{
			Some(n) => n,
			None    => 0
		}
}
